# JavaScript

## Scope and Hoisting
	Scope - global, function level, block level
	Lexical scope
	var vs let & const
		var scope
			function level
			hoisted
		let & const
			block scope
	Variable declaration and function expression declaration will be hoisted BUT not the initialization and function body
	normal function will be hoisted completely(with body)
	let / const will be hoisted but untill the declaration is reached it will through the reference error (wired!!)
	lines written after the 'return' statement will also get hoisted!!

## Arrow functions
	has lexical scope
	No arguments parameter / can use ...restingParameters instead
	cannot be used as constructor
	cannot be used with global objects
	prototype

## Operators
	Operators: +   -   *   /   %   ++   --   +''   -''  ,  ~~  =   +=   *=   /=   -=

    equality: ==   ===   !=
    comparisons: && ||

    Ternary operator
    ? : : : :
    rest / spread operator / resting paramerters

## Objects and Prototype
	typeof object --> 'object'
	scoping and context --> this
	Object creation - functions, classes, litral
	in operator - 'key' in object
    Object traversing - for..in loop - for(let key in user){}
    delete operator
	reserved keywords are allowed as property names
	"likes birds": true  // multiword property name must be quoted
	comparison - Two objects are equal only if they are the same object.
		// a = {}; b = a; a === b // true
		// a = {}; b = {}; a === b // false
	Object / Array reference cut
        Object.assign()
        spread operator
    cloning - deep cloning

## Classes
    class, constructor, static, extends, super
    class alias
    import / export


## Data Types
	7 data types - string, number, boolean, null, undefined, object, array, symbol

    null vs undefined
        undefined is used by the browser - implicit
        null can be used by the user - explicit
    destructuring - var {a, b} = {...} | var [a,,,,b] = [...]
    Symbols() - its factory function, not a class

## Functions
    functions
    arrow functions
    arguments
    closures
        closure and closure with var
        drawbacks of closure
        closure alternative in ES6
    return
    optional parameter and default values

## String
    '' / ""
    No char type
    new string method called repeat()

## Number
    Number('') === +''

    ParseInt vs Number
    parseInt('2a') // 2
    Number(2a) // NaN

    Highest safe number:
    https://stackoverflow.com/questions/307179/what-is-javascripts-highest-integer-value-that-a-number-can-go-to-without-losin

    parseInt vs parseFloat vs +/- vs ~~
    https://stackoverflow.com/questions/17106681/parseint-vs-unary-plus-when-to-use-which
    https://stackoverflow.com/questions/4055633/what-does-double-tilde-do-in-javascript


## Boolean
    Boolean('0') is true

## Array
    Methods: includes, some, every, find, filter, reduce, map, forEach, sort, reverse, shift, unshift
    array sorting / array operations

## Built in utils
    call vs apply vs bind
        call(this, 1, 2, 3)
        apply(this, [1, 2, 3])
        apply(null, [...]) --> function(...arr)
        bind returns a function but call and apply calls the function immediatly        
    super
    parseInt
    parseFloat
    Object
    Number
    String
    fetch

## Looping
    while
    do while
    for(;;){} // valid infinite loop

	forEach is like for with improved syntax
	map returns an array after processing
    forEach vs map - map is 70% faster!
        - use for each if you are not changing values
        - use map if creating a new array / releate to functional programming

	for of - for looping Map and Set, for(let _variableName_ in _map_.entries() || _map_.keys() || _map_.values())
	for in - for object

    break
    continue
    label: for(){} // use: break label;

## Conditional Statements
    if
    switch

needHandsOn: {
	generator - pausing function with yield keyword
	Symbols and Iterators
}

ES5 - oops there? - yes, with prototypes
ES5 vs ES6


Map - can hold any type as key - methods: set, get, delete | iterates in insertion order unlike object
Set - can hold only unique values - kinda like array? - methods: add, has, delete

Higher order components vs render props vs composition vs inheritance vs decorators



ES6 new features
	class
	arrow function
	let and const
	template strings
	default param values
	spread/rest operators
	object litrals
	Promises / async / await
	Symbols
	generators
	getters/setters
	fetch
	map / week map
    set / week set
	for of
	lots new array functions
	iterators


mixin
void
enum, overriding, overloading, get, set
interface
Array like objects

MobX


Nature of objects  including the prototypes


can we create our own prototype?




HTML - W3School is best
HTML5 APIs, new features, content model, element types, header and footer in page, css, 
html semantics, input types, element types, positioning, css tricks

	
	
* what data type wont support const
* what if we move the variable to the closure?
	
	
	
	
--Express--
https://www.expressjs.com
https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods